<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<title>
			Revolution Lighting Touch Screen Wall Station
		</title>
		<meta name="description" />
		<meta name="author" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<!---<link rel="stylesheet" href="css/wallstation.css" type="text/css" />  --->
		<style>
* {
    box-sizing: border-box;
    border:0;
    padding:0;
    margin:0;
    font-size: 1em;
}

/* ********  Definition of Area Dropdown Menu Div ************  */
.synAreaDropdown {
	display:inline-block;
	position: relative;
	z-index:2;
	width:100%;
	background-color: #333333;
}

.synAreaDropdown img{
	width: 25%;
	padding: 5px;
	padding-right: 10px;
	background-color: #333333;
	float:right;
}

.synAreaDropdownBtn{
	min-width: 30%;
	margin: 10px;
	padding: 5px;
	border-radius: 5px;
	/* background: linear-gradient(#aaaaaa,#dddddd); */
	background-color: #333333;
	color: white;
}

.synAreaDropdown:hover .synAreaDropdownBtn{
	/* background: linear-gradient(#666666,#111111); */
	background-color: #666666;
	color: white;
}

.synAreaDropdown:hover .synAreaDropdownContent{
	display: block;
}

.synAreaDropdownContent{
	display:none;
	position:absolute;
	margin-left: 10px;
    	background-color: #666666;
    	min-width: 160px;
    	border-radius: 5px;
    	box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
}

.synAreaDropdownContent ul{
	list-style-type: none;
	width: 100%;
	background-color: #666666;
	color: white;
}

.synAreaDropdownContent li{
	float: left;
	padding: 0.6em;
	width:33%;
	background-color:666666;
	color:white;
	text-align: center;
}

.synAreaDropdownContent li:hover{
	background-color: #dddddd;
	color: black;
}
/* **************************************************/



/* ********  Definition of Footer Menu Div *******  */
.synFooterMenu {
	width: 100%;
	background-color: #34C0D8;
	overflow:hidden;
	position:fixed;
	left:0;
	bottom:0;
}

.synFooterMenu ul{
	list-style-type: none;
	width: 100%;
	background-color: #34C0D8;
	color: white;
}

.synFooterMenu li{
	float: left;
	padding: 0.6em;
	width:25%;
	background-color:#34C0D8;
	color:black;
	border-right: 1px solid #ffffff;
	text-align: center;	
}

.synFooterMenu li:hover{
	background-color: #1b5f69;
	color: white;
}

.synFooterMenu li:last-child{
	border-right: none;
}
/* **************************************************/



/* ********  Definition of Scenes Div ************  */
.synScenes {
	width: 100%;
	float: left;
	background-color: #000000;
}

.synScenes button{
	width: 31%;
	height: 4em;
	margin: 0.4em;
	margin-top: 2em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#d86234,#632b15);
	box-shadow: 4px 7px #555555
}

.synScenes button:hover{
	background: linear-gradient(#ff723a,#8f4021);
}

.synScenes button:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}	
/* **************************************************/



/* ********  Definition of Zones Div ************  */
.synZones{
	width: 100%;
	float:left;
	background-color:black;
}


.synBtnZone{
	position:relative;
	top:0px;
	width: 100%;
	height: 4.7em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#d86234,#632b15);
	box-shadow: 4px 7px #555555
}

.synBtnZone:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}

.synBtnZone:hover{
	background: linear-gradient(#ff723a,#8f4021);
}


.synZoneCtrlContainer {
	width:30%;
	margin: 0.5em;
	margin-top: 2em;
	background-color:transparent;
	float:left;
}

.synZonesTWButton {
	margin-top:0em;
	color: white;
	background:transparent;
	border-radius: 12px;
}

.synZonesTWButton button{
	position:relative;
	top:0px;
	width: 100%;
	height: 4.7em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#aaaaaa,#ff0000);
	box-shadow: 4px 7px #555555
	
}

.synZonesTWButton button:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}

.synZonesTWButton button:hover{
	background: linear-gradient(#333333,#aaaaaa); 
}

.synZonesTWButton p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: center;
	display: none;
}

/* **************************************************/


/* ********  Definition of Output Div ************  */
.synOutputs{
	display: none;
	width: 100%;
	float:left;
	background-color:black;
}

.synOutputsCtrlContainer {
	width:30%;
	margin: 0.5em;
	margin-top: 2em;
	background-color:transparent;
	float:left;}

.synOutputsTWButton {
	margin-top:0em;
	color: white;
	background:transparent;
	border-radius: 12px;
}

.synOutputsTWButton button{
	position:relative;
	top:0px;
	width: 100%;
	height: 4.7em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#aaaaaa,#ff0000);
	box-shadow: 4px 7px #555555
	
}

.synOutputsTWButton button:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}

.synOutputsTWButton button:hover{
	background: linear-gradient(#333333,#aaaaaa); 
}

.synOutputsTWButton p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: center;
	display: none;
}

.synOutputsRgbButton {
	margin-top:0em;
	color: white;
	background:transparent;
	border-radius: 12px;
}

.synOutputsRgbButton button{
	position:relative;
	top:0px;
	width: 100%;
	height: 4.7em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#aaaaaa,#ff0000);
	box-shadow: 4px 7px #555555
	
}

.synOutputsRgbButton button:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}

.synOutputsRgbButton button:hover{
	background: linear-gradient(#333333,#aaaaaa); 
}

.synOutputsRgbButton input{
	text-align: center;
	position:relative;
	top:0px;
	width: 100%;
	height: 4.7em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#aaaaaa,#ff0000);
	box-shadow: 4px 7px #555555
}

.synOutputsRgbButton p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: center;
	display: none;
}


/* **************************************************/


.synTunableWhiteContainer {
	margin-top:0em;
	padding-left: 0.5em;
	padding-right: 0.5em;
	color: white;
	background:gray;
	border-radius: 12px;
}

.synTunableWhiteKelvin {
	background-color:inherited;
}

.synTunableWhiteKelvin p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: left;
}

/* ----  Tunable White Kelvin slider  -------*/
/*Slider Style Properties */
.synTunableWhiteKelvin input[type="range"] {
  -webkit-appearance: none;
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  width: 100%;
  height: 2em;
  margin: 0;
  border: none;
  border-radius: 14px;
  background: #0000ff;
  box-shadow: inset 0 1px 0 0 #0d0e0f, inset 0 -1px 0 0 #3a3d42;
  -webkit-box-shadow: inset 0 1px 0 0 #0d0e0f, inset 0 -1px 0 0 #3a3d42;
  outline: none; /* no focus outline */
}

.synTunableWhiteKelvin input[type="range"]::-moz-range-track {
  border: inherit;
  background: transparent;
}

.synTunableWhiteKelvin input[type="range"]::-ms-track {
  border: inherit;
  color: transparent; /* don't drawn vertical reference line */
  background: transparent;
}

.synTunableWhiteKelvin input[type="range"]::-ms-fill-lower,
.synTunableWhiteKelvin input[type="range"]::-ms-fill-upper {
  background: transparent;
}

.synTunableWhiteKelvin input[type="range"]::-ms-tooltip {
  display: none;
}

/* Thumb Style */
.synTunableWhiteKelvin input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: .75em;
  height: 2.5em;
  border: none;
  border-radius: 12px;
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #529de1), color-stop(100%, #245e8f)); /* android <= 2.2 */
  background-image: -webkit-linear-gradient(top , #529de1 0, #245e8f 100%); /* older mobile safari and android > 2.2 */;
  background-image: linear-gradient(to bottom, #aaaaaa 0, #666666 100%); /* W3C */
}

.synTunableWhiteKelvin input[type="range"]::-moz-range-thumb {
  width: .75em;
  height: 2.5em;
  border: none;
  border-radius: 12px;
  background-image: linear-gradient(to bottom, #529de1 0, #245e8f 100%); /* W3C */
}

.synTunableWhiteKelvin input[type="range"]::-ms-thumb {
  width: .75em;
  height: 2.5em;
  border-radius: 12px;
  border: 0;
  background-image: linear-gradient(to bottom, #529de1 0, #245e8f 100%); /* W3C */
}	


/* ----  Tunable White Intensity slider  -------*/
/* Slider Style */
.synTunableWhiteIntensity input[type="range"] {
  -webkit-appearance: none;
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  width: 100%;
  height: 2em;
  margin: 0;
  border: none;
  /*padding: 1px 2px; */
  border-radius: 14px;
  background: #34C0D8;
  /* background: #eeff44; */
  box-shadow: inset 0 1px 0 0 #0d0e0f, inset 0 -1px 0 0 #3a3d42;
  -webkit-box-shadow: inset 0 1px 0 0 #0d0e0f, inset 0 -1px 0 0 #3a3d42;
  outline: none; /* no focus outline */
}

.synTunableWhiteIntensity input[type="range"]::-moz-range-track {
  border: inherit;
  background: transparent;
}

.synTunableWhiteIntensity input[type="range"]::-ms-track {
  border: inherit;
  color: transparent; /* don't drawn vertical reference line */
  background: transparent;
}

.synTunableWhiteIntensity input[type="range"]::-ms-fill-lower,
.synTunableWhiteIntensity input[type="range"]::-ms-fill-upper {
  background: transparent;
}

.synTunableWhiteIntensity input[type="range"]::-ms-tooltip {
  display: none;
}

/* Thumb Style */
.synTunableWhiteIntensity input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: .75em;
  height: 2.5em;
  border: none;
  border-radius: 12px;
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #529de1), color-stop(100%, #245e8f)); /* android <= 2.2 */
  background-image: -webkit-linear-gradient(top , #529de1 0, #245e8f 100%); /* older mobile safari and android > 2.2 */;
  background-image: linear-gradient(to bottom, #aaaaaa 0, #666666 100%); /* W3C */
}
.synTunableWhiteIntensity input[type="range"]::-moz-range-thumb {
  width: .75em;
  height: 2.5em;
  border: none;
  border-radius: 12px;
  background-image: linear-gradient(to bottom, #529de1 0, #245e8f 100%); /* W3C */
}

.synTunableWhiteIntensity input[type="range"]::-ms-thumb {
  width: .75em;
  height: 2.5em;
  border-radius: 12px;
  border: 0;
  background-image: linear-gradient(to bottom, #529de1 0, #245e8f 100%); /* W3C */
}	

.synTunableWhiteIntensity {
	background-color:inherited;
}

.synTunableWhiteIntensity p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: left;
}



/* ********  Definition of Fader Control Div ************  */
.synFader {
	margin-top:0em;
	color: white;
	background:gray;
	border-radius: 12px;
}

.synFader p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: center;
}

/* Slider Style */
.synFader input[type="range"] {
  -webkit-appearance: none;
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  width: 100%;
  height: 1em;
  margin: 0;
  border: none;
  padding: 1px 2px;
  border-radius: 14px;
  background: #34C0D8;
  box-shadow: inset 0 1px 0 0 #0d0e0f, inset 0 -1px 0 0 #3a3d42;
  -webkit-box-shadow: inset 0 1px 0 0 #0d0e0f, inset 0 -1px 0 0 #3a3d42;
  outline: none; /* no focus outline */
}

.synFader input[type="range"]::-moz-range-track {
  border: inherit;
  background: transparent;
}

.synFader input[type="range"]::-ms-track {
  border: inherit;
  color: transparent; /* don't drawn vertical reference line */
  background: transparent;
}

.synFader input[type="range"]::-ms-fill-lower,
.synFader input[type="range"]::-ms-fill-upper {
  background: transparent;
}

.synFader input[type="range"]::-ms-tooltip {
  display: none;
}

/* thumb styling */
.synFader input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: .75em;
  height: 1.5em;
  border: none;
  border-radius: 12px;
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #529de1), color-stop(100%, #245e8f)); /* android <= 2.2 */
  background-image: -webkit-linear-gradient(top , #529de1 0, #245e8f 100%); /* older mobile safari and android > 2.2 */;
  background-image: linear-gradient(to bottom, #aaaaaa 0, #666666 100%); /* W3C */
}
.synFader input[type="range"]::-moz-range-thumb {
  width: .75em;
  height: 2em;
  border: none;
  border-radius: 12px;
  background-image: linear-gradient(to bottom, #529de1 0, #245e8f 100%); /* W3C */
}

.synFader input[type="range"]::-ms-thumb {
  width: .75em;
  height: 2em;
  border-radius: 12px;
  border: 0;
  background-image: linear-gradient(to bottom, #529de1 0, #245e8f 100%); /* W3C */
}	
/*****************************************************************/


/* ********  Definition of Toggle Button Control Div **********  */
.synToggleButton {
	margin-top:0em;
	color: white;
	background:transparent;
	border-radius: 12px;
}

.synToggleButton p{
	padding-top:0.5em;
	padding-bottom:0.25em;
	text-align: center;
	display: none;
}

.synToggleButton button{
	position:relative;
	top:0px;
	width: 100%;
	height: 4.7em;
	border-radius: 12px;
	color: white;
	background: linear-gradient(#aaaaaa,#333333);
	box-shadow: 4px 7px #555555
	
}

.synToggleButton button:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}

.synToggleButton button:hover{
	background: linear-gradient(#ff723a,#8f4021);
}
/*****************************************************************/


/* General Modal DIV Container */
.modalDialog-TunableWhite {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 2; /* Sit on top */
    padding-top: 60px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Tunable White Content */
.modalDialog-TunableWhiteContent {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    box-shadow: 5px 7px #999999
}

.modalDialog-TunableWhiteContent h1{
	font-size: 2em;
	color: #000000;
	margin-bottom: 0.5em;
}

.modalDialog-TunableWhiteContent button{
width: 20%;
height: 1.5em;
margin: 0.5em;
margin-top: 2em;
border-radius: 12px;
color: white;
background: linear-gradient(#cccccc,#555555);
box-shadow: 4px 7px #111111
}

.modalDialog-TunableWhiteContent button:active{
	box-shadow: 0 4px #333333;
	transform: translateY(4px);
}

.modalDialog-TunableWhiteContent-Param {
	display: none;
}

		</style>

<script src="javascripts/jscolor.js"></script>
<script>
"use strict";
/*-------------------------------------------------------------------------*/
/*                      Global Variable Declarations                       */

var GLOB_BaseUrl='http://localhost:3000';
/*-------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------*/
/*                      Function Declarations                              */
/*-------------------------------------------------------------------------*/

function getAjax(url, success) {
    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
    xhr.open('GET', url);
    xhr.onreadystatechange = function() {
        if (xhr.readyState>3 && xhr.status==200) success(xhr.responseText);
    };
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.send();
    return xhr;
}

function postAjax(url, data, success) {
    var params = typeof data == 'string' ? data : Object.keys(data).map(
            function(k){ return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]) }
        ).join('&');

    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
    xhr.open('POST', url);
    xhr.onreadystatechange = function() {
        if (xhr.readyState>3 && xhr.status==200) { success(xhr.responseText); }
    };
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    //xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
    xhr.send(params);
    return xhr;
}

function postSceneRequest(url, btnId)
{
	var sender=document.getElementById(btnId);
	var msg={};
	msg.name=sender.innerHTML;
	msg.requesttype="override";
	msg=JSON.stringify(msg);
	postAjax(url, msg, function(data){ console.log(data); });
}

function onSceneClick(btnId) {
//Event handler for scene buttons.  Sends scene request to the gateway
//and highlights the selected scene button
	var sender=document.getElementById(btnId);
	var container=document.getElementById('divScenes');
	var numButtons = document.getElementById("divScenes").children.length;
	var i;
	var currButton;
	postSceneRequest(GLOB_BaseUrl+'/override_scene/invokescene', btnId);
	//Highlight the clicked scene button only
	for (i = 0; i < numButtons; i++) 
		{
		currButton=container.children[i];
		currButton.style.color='white';
		}
	sender.style.color='yellow';
}

function removeScenes() {
	var container=document.getElementById('divScenes');
	var numElements = document.getElementById("divScenes").childNodes.length;
	var i;
	for (i = 0; i < numElements; i++) 
		{
		container.removeChild(container.childNodes[0]);  
		}
}

function populateScenes(jsonData) {
/* Creates scene button elements based upon the JSON data passed */
	var sceneList=JSON.parse(jsonData);
	var count=sceneList.length;
	var newButton;
	var container;
	var i;
	container=document.getElementById("divScenes");
	for (i = 0; i < count; i++) 
		{
		if (sceneList[i] != '----') //gateway passes a non-scene labeled this. Filter it out.
			{ 
			newButton=document.createElement("button");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnScene_"+i);
			newButton.addEventListener("click", function(){onSceneClick(this.id);})
			newButton.innerHTML=sceneList[i];
			container.appendChild(newButton);
			}
		}		
}

function getAndDisplayScenes(url) {
/* Gets the list of scenes from the gateway and then displays the appropriate scene buttons */
	removeScenes();
	getAjax(url, function(data){populateScenes(data);});
}


/*-------------------------------------------------------------------------*/
/* Code related to output elements is below                                */
/*-------------------------------------------------------------------------*/

function removeOutputs() {
/* Removes the existing output controls */
	var container=document.getElementById('divOutputs');
	var numElements = document.getElementById("divOutputs").childNodes.length;
	var i;
	for (i = 0; i < numElements; i++) 
		{
		container.removeChild(container.childNodes[0]);  
		}
}

function uidFromElementId(elementId) {
/* Extracts the UID from my HTML element naming convention */
	var strAfter;
	var i;
	var j;
	var numChars;
	var uid="";
	i=elementId.indexOf("|");
	j=elementId.lastIndexOf("|");
	if (i>-1 && j>-1 && j>i)
		{
		uid=elementId.substr(i+1,j-i-1);
		}
	if (i>-1 && j>-1 && i==j)
		{
		numChars=elementId.length-i-1;
		uid=elementId.substr(i+1,numChars);
		}
	return uid;
}

function postOnOffFixtureRequest(url, uid, level)
/* Posts an on/off request.  level passed should be either 0 or 100  uid is gateway UID for the output*/
{
	var msg={};
	msg.requesttype="wallstation";
	msg.uid=uid;
	msg.on_off ={};
	msg.on_off.levelpct=level.toString();
	msg=JSON.stringify(msg);
	console.log(msg);
	postAjax(url, msg, function(data){ console.log(data); });
}


function onOutputToggleClick(buttonId) {
/*  Executes when an output toggle button element is clicked */
	var level;
	var uid=uidFromElementId(buttonId);
	var clickedBtn=document.getElementById(buttonId);
	var valueHolder=document.getElementById(buttonId+"|Level");
	var currVal=valueHolder.innerHTML;
	if (currVal=="OFF")
		{
		clickedBtn.style.background="green";
		valueHolder.innerHTML="ON";
		level=100;
		}
	else
		{
		clickedBtn.style.background="linear-gradient(#aaaaaa,#333333)";
		valueHolder.innerHTML="OFF";
		level=0;
		}	
	postOnOffFixtureRequest(GLOB_BaseUrl+'/setfixturelevel', uid, level);
}


function postFixtureLevelRequest(url, uid, level)
/* Posts a dim level change request.  uid is gateway UID for the output*/
{
	var msg={};
	msg.requesttype="wallstation";
	msg.uid=uid;
	msg.dim ={};
	msg.dim.levelpct=level.toString();
	msg=JSON.stringify(msg);
	console.log(msg);
	postAjax(url, msg, function(data){ console.log(data); });
}


function postOutputTunableWhiteRequest(url, uid, kelvin, level)
/* Posts tunable-white request.  uid is gateway UID for the output*/
{
	var msg={};
	msg.requesttype="wallstation";
	msg.uid=uid;
	msg.cct ={};
	msg.cct.levelpct=level.toString();
	msg.cct.temp=kelvin.toString();
	msg=JSON.stringify(msg);
	postAjax(url, msg, function(data){ console.log(data); });
}


function onOutputFaderChange(faderId) {
/*  Executes when an output fader control onChange event fires */
	var outputFader=document.getElementById(faderId);
	var faderLevelCaption=document.getElementById(faderId+"|Level");
	var uid=uidFromElementId(faderId);
	faderLevelCaption.innerHTML=outputFader.value+"%";
	postFixtureLevelRequest(GLOB_BaseUrl+'/setfixturelevel', uid, outputFader.value);
}


function onOutputTunableWhiteClick(modalTWId, twButtonId) {
/*  Executes when a tunable white control onClick event fires */
	var modalDialog=document.getElementById(modalTWId);
	var buttonSender=document.getElementById(twButtonId);
	var currTemp=document.getElementById(twButtonId+"|Kelvin").innerHTML;
	var currLevel=document.getElementById(twButtonId+"|Level").innerHTML;
	tunableWhiteDialogOpen(modalTWId,currTemp,currLevel,twButtonId);
}

function onOutputRgbChange(sender) {
	var inputElem=document.getElementById(sender);
	var hiddenLabel=document.getElementById(sender+"|Label");
	var hiddenButton=document.getElementById(sender+"|Color");
	inputElem.value=hiddenLabel.innerHTML;
	hiddenButton.click();
}

function onOutputRgbFineChange(sender) {
	var inputElem=document.getElementById(sender);
	var hiddenButton=document.getElementById(sender+"|Color");
	inputElem.value=hiddenButton.innerHTML;
}


function onOutputRgbClick(sender) {
	//Code to send color update to gateway goes here
}


function populateOutputs(jsonData) {
/* Creates scene button elements based upon the JSON data passed */
	var containerOutputs;
	var ctrlContainer;
	var tempContainer;
	var paragraph;
	var inputElem;
	var fader;
	var picker;
	var newButton;
	var ctrl;
	var configData;
	var outputList;
	var count;
	var i;
	var outputType;
	var outputName;
	var uid;
	var picker;
	//begin
	configData=JSON.parse(jsonData);
	outputList = configData.fixtures;
	count=outputList.length;
	containerOutputs=document.getElementById("divOutputs");
	for (i = 0; i < count; i++) 
		{
		tempContainer=document.createElement('div');
		tempContainer.setAttribute("class","synOutputsCtrlContainer");
		ctrlContainer=containerOutputs.appendChild(tempContainer);
		outputType=outputList[i].type;
		outputName=outputList[i].name;
		uid=outputList[i].uid;
		if (outputType=="on_off")
			{
			tempContainer=document.createElement("div");
			tempContainer.setAttribute("class", "synToggleButton");
			ctrl=ctrlContainer.appendChild(tempContainer);
			newButton=document.createElement("button");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnOutputToggle|"+uid);
			newButton.innerHTML=outputName;
			newButton.addEventListener("click", function(){onOutputToggleClick(this.id);})
			ctrl.appendChild(newButton);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputToggle|"+uid+"|Level");
			tempContainer=document.createTextNode("OFF");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);			
			} //end if
			
			
		if (outputType=="dim")
			{
			tempContainer=document.createElement('div');
			tempContainer.setAttribute("class", "synFader");
			ctrl=ctrlContainer.appendChild(tempContainer);
			paragraph=document.createElement("p");
			tempContainer=document.createTextNode(outputName);
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);
			fader=document.createElement("input");
			fader.type="range";
			fader.name="dimmer";
			fader.min="0";
			fader.max="100";
			fader.value="75";
			fader.id="faderOutput|"+uid;
			fader.addEventListener("change", function(){onOutputFaderChange(this.id);})
			ctrl.appendChild(fader);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id","faderOutput|"+uid+"|Level");
			tempContainer=document.createTextNode("75%");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);
			} //end if
			
		if (outputType=="cct")
			{
			tempContainer=document.createElement("div");
			tempContainer.setAttribute("class", "synOutputsTWButton");
			ctrl=ctrlContainer.appendChild(tempContainer);
			newButton=document.createElement("button");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnOutputTW|"+uid);
			newButton.innerHTML=outputName+"<br>3000K @ 100%";
			newButton.addEventListener("click", function(){onOutputTunableWhiteClick('modalTW', this.id);});
			//intensity level stored in this hidden paragraph element
			ctrl.appendChild(newButton);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputTW|"+uid+"|Level");
			tempContainer=document.createTextNode("100");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);	
			//output name (label) stored in this hidden paragraph element
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputTW|"+uid+"|Label");
			tempContainer=document.createTextNode(outputName);
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);	
			//kelvin temp stored in this hidden paragraph element
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputTW|"+uid+"|Kelvin");
			tempContainer=document.createTextNode("3000");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);		
			} //end if

		
		if (outputType=="rgbw")
			{	
			tempContainer=document.createElement("div");
			tempContainer.setAttribute("class", "synOutputsRgbButton");
			ctrl=ctrlContainer.appendChild(tempContainer);
			newButton=document.createElement("input");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnOutputRgb|"+uid+"|Color");
			newButton.value=outputName;
			var visibleId="btnOutputRgb|"+uid;
			newButton.addEventListener("click", function(){onOutputRgbClick(this.id);});
			newButton.addEventListener("change", function(){onOutputRgbChange(visibleId);});
			newButton.style.display="none";
			ctrl.appendChild(newButton);
			inputElem=document.createElement("input");
			inputElem.setAttribute("id", "btnOutputRgb|"+uid);
			picker=new jscolor(inputElem);
			picker.valueElement=newButton;
			picker.styleElement=inputElem;
			var funcCall="onOutputRgbFineChange('btnOutputRgb|"+uid+"')";
			picker.onFineChange=funcCall;
			picker.borderColor="#ffffff";
			picker.backgroundColor="#333333";
			picker.insetColor="#ffffff";
			picker.position="top";
			picker.closable="true";
			picker.closeText="Done";
			picker.buttonColor="#ffffff";
			ctrl.appendChild(inputElem);
			inputElem.value=outputName;
			//output name (label) stored in this hidden paragraph element
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputRgb|"+uid+"|Label");
			tempContainer=document.createTextNode(outputName);
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);
			} //end if
		} //end for	
}


function getAndDisplayOutputs(url) {
/* Gets the list of outputs from the gateway and then displays the appropriate output buttons */
	removeOutputs();
	getAjax(url, function(data){populateOutputs(data);});
}


/*-------------------------------------------------------------------------*/
/* Code related to zone elements is below                                  */
/*-------------------------------------------------------------------------*/
function postZoneLevelRequest(url, groupName, level)
/* Posts a dim level change request.  uid is gateway UID for the output*/
{
	var msg={};
	msg.name=groupName;
	msg.level=level.toString();
	msg=JSON.stringify(msg);
	postAjax(url, msg, function(data){ console.log(data); });
}


function onZoneFaderChange(faderId) {
/*  Executes when an zone fader control onChange event fires */
	var zoneFader=document.getElementById(faderId);
	var faderLevelCaption=document.getElementById(faderId+"|Level");
	var groupName=document.getElementById(faderId+"|Label").innerHTML;
	faderLevelCaption.innerHTML=zoneFader.value+"%";
	postZoneLevelRequest(GLOB_BaseUrl+'/groups/setgrouptolevel', groupName, zoneFader.value);
}

function onZoneTunableWhiteClick(modalTWId, twButtonId) {
/*  Executes when a tunable white zone control onClick event fires */
	var modalDialog=document.getElementById(modalTWId);
	var buttonSender=document.getElementById(twButtonId);
	var currTemp=document.getElementById(twButtonId+"|Kelvin").innerHTML;
	var currLevel=document.getElementById(twButtonId+"|Level").innerHTML;
	tunableWhiteDialogOpen(modalTWId,currTemp,currLevel,twButtonId);
}

function postZoneTunableWhiteRequest(url, groupName, kelvin, level)
/* Posts zone tunable-white request.  uid is gateway UID for the output*/
{
	var msg={};
	msg.name=groupName;
	msg.level=level.toString();
	msg.cct ={};
	msg.cct=kelvin;
	msg=JSON.stringify(msg);
	postAjax(url, msg, function(data){ console.log(data); });
}

function populateZones(jsonData) {
/* Creates zone button elements based upon the JSON data passed */
	var configData;
	var zoneList;
	var containerZones;
	var tempContainer;
	var ctrlContainer;
	var count;
	var i;
	var zoneType;
	var zoneName;
	var uid;
	var ctrl;
	var fader;
	var paragraph;
	var newButton;
/*

	var inputElem;

	var picker;

	var picker;
*/
	//begin
	configData=JSON.parse(jsonData);
	console.log(configData);
	zoneList = configData.groups;
	console.log(zoneList);
	count=zoneList.length;
	containerZones=document.getElementById("divZones");
	for (i = 0; i < count; i++) 
		{
		tempContainer=document.createElement('div');
		tempContainer.setAttribute("class","synZoneCtrlContainer");
		ctrlContainer=containerZones.appendChild(tempContainer);
		zoneType=zoneList[i].type;
		zoneName=zoneList[i].name;
		uid=zoneList[i].uid;
/*
		if (zoneType=="on_off")
			{
			tempContainer=document.createElement("div");
			tempContainer.setAttribute("class", "synToggleButton");
			ctrl=ctrlContainer.appendChild(tempContainer);
			newButton=document.createElement("button");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnOutputToggle|"+uid);
			newButton.innerHTML=outputName;
			newButton.addEventListener("click", function(){onOutputToggleClick(this.id);})
			ctrl.appendChild(newButton);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputToggle|"+uid+"|Level");
			tempContainer=document.createTextNode("OFF");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);			
			} //end if
*/			
			
		if (zoneType=="brightness")
			{
			tempContainer=document.createElement('div');
			tempContainer.setAttribute("class", "synFader");
			ctrl=ctrlContainer.appendChild(tempContainer);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id","faderZone|"+uid+"|Label");
			tempContainer=document.createTextNode(zoneName);
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);
			fader=document.createElement("input");
			fader.type="range";
			fader.name="dimmer";
			fader.min="0";
			fader.max="100";
			fader.value="75";
			fader.id="faderZone|"+uid;
			fader.addEventListener("change", function(){onZoneFaderChange(this.id);})
			ctrl.appendChild(fader);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id","faderZone|"+uid+"|Level");
			tempContainer=document.createTextNode("75%");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);
			} //end if
		
		if (zoneType=="ctemp")
			{
			tempContainer=document.createElement("div");
			tempContainer.setAttribute("class", "synZonesTWButton");
			ctrl=ctrlContainer.appendChild(tempContainer);
			newButton=document.createElement("button");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnZoneTW|"+uid);
			newButton.innerHTML=zoneName+"<br>3000K @ 100%";
			newButton.addEventListener("click", function(){onZoneTunableWhiteClick('modalTW', this.id);});
			//intensity level stored in this hidden paragraph element
			ctrl.appendChild(newButton);
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnZoneTW|"+uid+"|Level");
			tempContainer=document.createTextNode("100");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);	
			//output name (label) stored in this hidden paragraph element
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnZoneTW|"+uid+"|Label");
			tempContainer=document.createTextNode(zoneName);
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);	
			//kelvin temp stored in this hidden paragraph element
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnZoneTW|"+uid+"|Kelvin");
			tempContainer=document.createTextNode("3000");
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);		
			} //end if
/*	
		
		if (zoneType=="rgbw")
			{	
			tempContainer=document.createElement("div");
			tempContainer.setAttribute("class", "synOutputsRgbButton");
			ctrl=ctrlContainer.appendChild(tempContainer);
			newButton=document.createElement("input");
			newButton.setAttribute("type", "button");
			newButton.setAttribute("id","btnOutputRgb|"+uid+"|Color");
			newButton.value=outputName;
			var visibleId="btnOutputRgb|"+uid;
			newButton.addEventListener("click", function(){onOutputRgbClick(this.id);});
			newButton.addEventListener("change", function(){onOutputRgbChange(visibleId);});
			newButton.style.display="none";
			ctrl.appendChild(newButton);
			inputElem=document.createElement("input");
			inputElem.setAttribute("id", "btnOutputRgb|"+uid);
			picker=new jscolor(inputElem);
			picker.valueElement=newButton;
			picker.styleElement=inputElem;
			var funcCall="onOutputRgbFineChange('btnOutputRgb|"+uid+"')";
			picker.onFineChange=funcCall;
			picker.borderColor="#ffffff";
			picker.backgroundColor="#333333";
			picker.insetColor="#ffffff";
			picker.position="top";
			picker.closable="true";
			picker.closeText="Done";
			picker.buttonColor="#ffffff";
			ctrl.appendChild(inputElem);
			inputElem.value=outputName;
			//output name (label) stored in this hidden paragraph element
			paragraph=document.createElement("p");
			paragraph.setAttribute("id", "btnOutputRgb|"+uid+"|Label");
			tempContainer=document.createTextNode(outputName);
			paragraph.appendChild(tempContainer);
			ctrl.appendChild(paragraph);
			} //end if
*/
		} //end for	
}

function removeZones() {
/* Removes the existing zone controls */
	var container=document.getElementById('divZones');
	var numElements = document.getElementById("divZones").childNodes.length;
	var i;
	for (i = 0; i < numElements; i++) 
		{
		container.removeChild(container.childNodes[0]);  
		}
}

function getAndDisplayZones(url) {
/* Gets the list of outputs from the gateway and then displays the appropriate output buttons */
	removeZones();
	getAjax(url, function(data){populateZones(data);});
}

/*-------------------------------------------------------------------------*/
/* Stuff below is mostly tunable white dialog stuff                        */
/*-------------------------------------------------------------------------*/

function rgbToHex(red, green, blue) {
	var r;
	var g;
	var b;
	r=parseInt(red).toString(16);
	if (r.length==1) {r="0" + r;}
	g=parseInt(green).toString(16);
	if (g.length==1) {g="0" + g;}
	b=parseInt(blue).toString(16);
	if (b.length==1) {b="0" + b;}
	return "#" + r + b + g;

}

function blackBodyToRGB(kelvinTemp) {
	var rgbString;
	var dRed=0;
	var dGreen=0;
	var dBlue=0;
	var calcTemp=(parseInt(kelvinTemp)+1500)/100; //Used for all RGB calcs
	// ******** Calc the Red Value ********
	if (calcTemp < 67) 
		{
    		dRed=255;
		} 
	else 
		{
    		dRed=calcTemp-60;
    		dRed=329.698727446 * Math.pow(dRed,-0.1332047592);
		}
	if (dRed<0) {dRed=0;}
	if (dRed>255) {dRed=255;}
	// *******  Calc the Green Value **********
	if (calcTemp < 67) 
		{
    		dGreen=calcTemp;
    		dGreen=99.4708025861 * Math.log(dGreen) - 161.1195681661;
		} 
	else 
		{
    		dGreen=calcTemp-60;
    		dGreen=288.1221695238 * Math.pow(dGreen,-0.0755148492);
		}
	if (dGreen<0) {dGreen=0;}
    	if (dGreen>255) {dGreen=255;}	
	// *******  Calc the Blue Value **********
	if (calcTemp > 65) 
		{
    		dBlue=255;
		} 
	else 
		{
		if (calcTemp<=19) 
			{
			dBlue=0;
			}
		else 
			{
			dBlue=calcTemp-10;
			dBlue=138.5177312231 * Math.log(dBlue) - 305.0447927307;
			}
		}
	if (dBlue<0) {dBlue=0;}
	if (dBlue>255) {dBlue=255;}	
	// Return the result
	rgbString=rgbToHex(dRed, dGreen, dBlue);
	return rgbString;
}


function setSliderKelvinColor(sliderId, newColor) {
	var slider=document.getElementById(sliderId);
	var sliderKelvin=document.getElementById(sliderId+"|Kelvin");
	slider.style.background=blackBodyToRGB(newColor);
	slider.value=newColor;
	sliderKelvin.innerHTML=newColor+String.fromCharCode(176)+"K";
}


function setSliderIntensity(sliderId, newLevel) {
	var slider=document.getElementById(sliderId);
	var sliderIntensityLabel=document.getElementById(sliderId+"|Level");
	slider.value=newLevel;
	sliderIntensityLabel.innerHTML=newLevel + "%";
}

function tunableWhiteDialogOpen(id, kelvin, intensity, sender) {
/* Makes the tunable white dialog with the id passed visible and sets the initial kelvin and intensity values */
	var dialog=document.getElementById(id);
	var elemSender=document.getElementById(id+"|Sender");
	dialog.style.display="block";
	setSliderIntensity(id+"|Intensity", intensity);
	setSliderKelvinColor(id+"|Color",kelvin);
	elemSender.innerHTML=sender;
}

function tunableWhiteDialogCancel(id) {
/* Closes the tunable white dialog with the id passed  */
	var dialog=document.getElementById(id);
	dialog.style.display="none";	
}

function tunableWhiteDialogOk(id) {
	var dialog=document.getElementById(id);
	var paramSender=document.getElementById(id+"|Sender");
	var uid=uidFromElementId(paramSender.innerHTML);
	var slider=document.getElementById(id+"|Intensity");
	var elemSender=document.getElementById(paramSender.innerHTML);
	var elemLabel=document.getElementById(paramSender.innerHTML+"|Label");
	var elemKelvin=document.getElementById(paramSender.innerHTML+"|Kelvin");
	var elemLevel=document.getElementById(paramSender.innerHTML+"|Level");
	var kelvin=document.getElementById(id+"|Color").value;
	var sender=paramSender.innerHTML;
	var requestType;
	elemSender.style.background=blackBodyToRGB(kelvin);
	elemKelvin.innerHTML=kelvin;
	elemLevel.innerHTML=slider.value;
	elemSender.innerHTML=elemLabel.innerHTML+"<br>"+kelvin+"K @ "+slider.value+"%";
	if (kelvin > 2700) 
		{
		elemSender.style.color="#000000";
		}
	else
		{
		elemSender.style.color="#ffffff";
		}
	//determine the type of control that spawned the dialog box and post the appropriate change
	requestType='';
	if (sender.indexOf('btnOutputTW') > -1) {requestType='output';}
	if (sender.indexOf('btnZoneTW') > -1) {requestType='zone';}
	if (requestType=="output") 
		{
		postOutputTunableWhiteRequest(GLOB_BaseUrl+'/setfixturelevel', uid, kelvin, slider.value);
		}
	if (requestType=="zone") 
		{
		postZoneTunableWhiteRequest(GLOB_BaseUrl+'/groups/setgrouptocolortemp', elemLabel.innerHTML, kelvin, slider.value);
		}
	dialog.style.display="none";
}

/* Items above are for tunable white */

function showZoneControl() {
	document.getElementById("divZones").style.display="block";
	document.getElementById("mniZones").style.background="#1b5f69";
	document.getElementById("divScenes").style.display="none";
	document.getElementById("mniScenes").style.background="#34C0D8";
	document.getElementById("divOutputs").style.display="none";
	document.getElementById("mniOutputs").style.background="#34C0D8";
}

function showSceneControl() {
	document.getElementById("divZones").style.display="none";
	document.getElementById("mniZones").style.background="#34C0D8";
	document.getElementById("divScenes").style.display="block";
	document.getElementById("mniScenes").style.background="#1b5f69";
	document.getElementById("divOutputs").style.display="none";
	document.getElementById("mniOutputs").style.background="#34C0D8";
}

function showOutputControl() {
	document.getElementById("divZones").style.display="none";
	document.getElementById("mniZones").style.background="#34C0D8";
	document.getElementById("divScenes").style.display="none";
	document.getElementById("mniScenes").style.background="#34C0D8";
	document.getElementById("divOutputs").style.display="block";
	document.getElementById("mniOutputs").style.background="#1b5f69";
}

function showEnergyUsage() {
	var btn=document.getElementById("colorButton");
	btn.style.display="none";
	btn.jscolor.show();
}

function updateFaderDisplay(faderId, newLevel) {
	var faderLevel=document.getElementById(faderId+"_Level");
	faderLevel.innerHTML=newLevel+"%";
}

function toggleButton(buttonId) {
	var clickedBtn=document.getElementById(buttonId);
	var valueHolder=document.getElementById(buttonId+"_Level");
	var currVal=valueHolder.innerHTML;
	if (currVal=="OFF")
		{
		clickedBtn.style.background="green";
		valueHolder.innerHTML="ON";
		}
	else
		{
		clickedBtn.style.background="linear-gradient(#aaaaaa,#333333)";
		valueHolder.innerHTML="OFF";
		}	
}

function getHostURL(){
	var host=location.hostname;
	if (host=='')
		{
		GLOB_BaseUrl='http://localhost:3000';
		}
	else 
	 	{
	 	GLOB_BaseUrl='http://'+ host + ':3000';
	 	}
}

</script>

	</head>
	
	
<body style="background-color: #000000">

	<!-- Modal Dialog for Tunable White (initially hidden) -->
	<div id="modalTW" class="modalDialog-TunableWhite">
		<div class="modalDialog-TunableWhiteContent">  
				<h1>Tunable White Settings</h1>
				<p id="modalTW|Sender" class="modalDialog-TunableWhiteContent-Param">Hidden Parameter for Sender</p>
				
				<div class="synTunableWhiteKelvin">
					<p id="modalTW|Color|Kelvin">4000K</p>
					<input id="modalTW|Color" type="range" name="colortemp" min="2000" max="6500" step="100" onchange="setSliderKelvinColor(this.id, this.value)">
				</div>
				
				<div class="synTunableWhiteIntensity">
					<p id="modalTW|Intensity|Level">50%</p>
					<input id="modalTW|Intensity" type="range" name="colortemp" min="0" max="100" step="1" onchange="setSliderIntensity(this.id, this.value)">
				</div>
				
		    	<button id="btnOk" onclick="tunableWhiteDialogOk('modalTW')">OK</button>
		    	<button id="btnCancel" onclick="tunableWhiteDialogCancel('modalTW')">Cancel</button>
		</div>	  
	</div>

		<div class="synAreaDropdown">
			<img src="images/rvlt_logo.png" alt="Revolution Lighting Logo">
			<!--- Disabling Area Menu for the Time Being
			<button class="synAreaDropdownBtn">Lobby 101 &darr;</button>
			<div class="synAreaDropdownContent">
				<ul>
					<li>Lobby 101</li>
					<li>1st Floor Corridors</li>
					<li>2nd Floor Corridors</li>
					<li>Cafeteria</li>
				</ul>
			</div>
			--->
		</div>
		
	<!--- This div will contain the scene buttons defined on the controller.  The button elements are created via
	a script call to getScenes --->
	<div class="synScenes" id="divScenes">
	</div>
	
	
<!--- Zone Control Div Goes Here --->
	<div class="synZones" id="divZones">
		<div class="synZoneCtrlContainer">
		<button class="synBtnZone jscolor {valueElement:null, value:'d82323', width:150, height: 100, position:'top',borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
    				Zone 1<br>Level=74%
    		</button>
    		</div>

		<div class="synZoneCtrlContainer">
		<button class="synBtnZone jscolor {valueElement:null, value:'d82323', width:150, height: 100, position:'top',borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
    				Zone 2
    		</button>	
		</div>
		
		<div class="synZoneCtrlContainer">
		<button class="synBtnZone jscolor {valueElement:null, value:'d82323', width:150, height: 100, position:'top',borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
    				Zone 3
    		</button>	
		</div>
		
		<div class="synZoneCtrlContainer">
			<div class="synTunableWhite">
				<p>Zone 4</p>
				<input id="mySlider" type="range" name="colortemp" min="2000" max="10000" step="100" onchange="setSliderColor(this.id, this.value)">
				<p id="mySlider_Kelvin">4000K</p>
			</div>
		</div>	
		
		<div class="synZoneCtrlContainer">
			<div class="synFader">
				<p>Zone 5</p>
				<input id="myFader" type="range" name="dimmer" min="0" max="100" step="5" onchange="updateFaderDisplay(this.id, this.value)">
				<p id="myFader_Level">50%</p>
			</div>
		</div>	
		
		<div class="synZoneCtrlContainer">
			<div class="synToggleButton">
				<button id="myToggle" onClick="toggleButton(this.id)">
		    				Zone 6
		    		</button>	
		    		<p id="myToggle_Level">OFF</p>
		    	</div>
		</div>	
		
	</div>
<!--- End of Zone Control Div --->


<!--- Output Control Div Goes Here --->
	<div class="synOutputs" id="divOutputs">
		<div class="synOutputsCtrlContainer">
		<button class="synOutputsTWButton jscolor {valueElement:null, value:'d82323', width:150, height: 100, position:'top',borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
    				Output 1
    		</button>
    		</div>

		<div class="synOutputsCtrlContainer">
		<button class="synOutputsTWButton jscolor {valueElement:null, value:'d82323', width:150, height: 100, position:'top',borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
    				Output 2
    		</button>	
		</div>
		
		<div class="synOutputsCtrlContainer">
		<button class="synOutputsTWButton jscolor {valueElement:null, value:'d82323', width:150, height: 100, position:'top',borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
    				Output 3
    		</button>	
		</div>
		
		<div class="synOutputsCtrlContainer">
			<div class="synTunableWhite">
				<p>Output 4</p>
				<input id="mySlider2" type="range" name="colortemp" min="2000" max="10000" step="100" onchange="setSliderColor(this.id, this.value)">
				<p id="mySlider2_Kelvin">4000K</p>
			</div>
		</div>	
		
		<div class="synOutputsCtrlContainer">
			<div class="synFader">
				<p>Output 5</p>
				<input id="myFader2" type="range" name="dimmer" min="0" max="100" step="5" onchange="updateFaderDisplay(this.id, this.value)">
				<p id="myFader2_Level">50%</p>
			</div>
		</div>	
		
		<div class="synOutputsCtrlContainer">
			<div class="synToggleButton">
				<button id="myToggle2" onClick="toggleButton(this.id)">
		    				Output 6
		    		</button>	
		    		<p id="myToggle2_Level">OFF</p>
		    	</div>
		</div>		
	</div>
<!--- End of Output Control Div --->

	
	<div class="synFooterMenu">
		<ul>
			<li id="mniScenes" onclick="showSceneControl()">
				Scenes
			</li>
			<li id="mniZones" onclick="showZoneControl()">
				Zones
			</li>
			<li id="mniOutputs" onclick="showOutputControl()">
				Outputs
			</li>
			<li id="mniUsage">
				Energy Usage
			</li>
		</ul>
	</div>
	
</body>



<script>
getHostURL();
getAndDisplayScenes(GLOB_BaseUrl+'/override_scene/getscenenamelist');
getAndDisplayZones(GLOB_BaseUrl+'/config/getconfig');
getAndDisplayOutputs(GLOB_BaseUrl+'/config/getconfig');
document.getElementById("divZones").style.display="none";
document.getElementById("mniScenes").style.background="#1b5f69";

</script>

</html>